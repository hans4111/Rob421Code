
Rob421.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000003ec  00000480  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800106  00800106  00000486  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000486  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000004f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000031d  00000000  00000000  0000056c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000010e  00000000  00000000  00000889  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000387  00000000  00000000  00000997  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000174  00000000  00000000  00000d20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000020e  00000000  00000000  00000e94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000225  00000000  00000000  000010a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  000012c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	5d c1       	rjmp	.+698    	; 0x2d0 <__vector_5>
  16:	00 00       	nop
  18:	32 c1       	rjmp	.+612    	; 0x27e <__vector_6>
  1a:	00 00       	nop
  1c:	07 c1       	rjmp	.+526    	; 0x22c <__vector_7>
  1e:	00 00       	nop
  20:	dc c0       	rjmp	.+440    	; 0x1da <__vector_8>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	c9 c0       	rjmp	.+402    	; 0x1bc <__vector_10>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	a7 c0       	rjmp	.+334    	; 0x190 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec ee       	ldi	r30, 0xEC	; 236
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e0       	ldi	r26, 0x06	; 6
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 31       	cpi	r26, 0x12	; 18
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	2f d1       	rcall	.+606    	; 0x322 <main>
  c4:	91 c1       	rjmp	.+802    	; 0x3e8 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <debounce>:
//****************************************************************************************************/
//************DEBOUNCE**Takes in button**Returns true if pressed***************************************/
 
  int8_t debounce(uint8_t button) {
    static uint16_t state = 0; //holds present state 
    state = (state << 1) | ( bit_is_clear(PIND, button))| 0xE000;
  c8:	40 b3       	in	r20, 0x10	; 16
  ca:	20 91 06 01 	lds	r18, 0x0106
  ce:	30 91 07 01 	lds	r19, 0x0107
  d2:	22 0f       	add	r18, r18
  d4:	33 1f       	adc	r19, r19
  d6:	30 6e       	ori	r19, 0xE0	; 224
  d8:	50 e0       	ldi	r21, 0x00	; 0
  da:	02 c0       	rjmp	.+4      	; 0xe0 <debounce+0x18>
  dc:	55 95       	asr	r21
  de:	47 95       	ror	r20
  e0:	8a 95       	dec	r24
  e2:	e2 f7       	brpl	.-8      	; 0xdc <debounce+0x14>
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	40 ff       	sbrs	r20, 0
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <debounce+0x28>
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	28 2b       	or	r18, r24
  f2:	39 2b       	or	r19, r25
  f4:	30 93 07 01 	sts	0x0107, r19
  f8:	20 93 06 01 	sts	0x0106, r18
    if (state == 0xF000) return 1;
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	21 15       	cp	r18, r1
 100:	30 4f       	sbci	r19, 0xF0	; 240
 102:	09 f0       	breq	.+2      	; 0x106 <debounce+0x3e>
 104:	80 e0       	ldi	r24, 0x00	; 0
    return 0;
  }//Debounce
 106:	08 95       	ret

00000108 <timer0_init>:
 
//******************************************************************************************************/
//*********TIMER0_INIT****CLOCK***********************************************************************/
  
  void timer0_init(void){             //timer counter 0 setup, running off 32768 clock
     TCCR0 |= (1<<WGM21) | (1<<WGM20);  //fast PWM
 108:	83 b7       	in	r24, 0x33	; 51
 10a:	88 64       	ori	r24, 0x48	; 72
 10c:	83 bf       	out	0x33, r24	; 51
     TCCR0 |= (1<<COM21) ;              //PB7 output, non Inverted
 10e:	83 b7       	in	r24, 0x33	; 51
 110:	80 62       	ori	r24, 0x20	; 32
 112:	83 bf       	out	0x33, r24	; 51
     TCCR0 |= (1<<CS22) | (1<<CS20);    //1024 prescale (H_bridge, 100k switching max) 16M/1024=15K
 114:	83 b7       	in	r24, 0x33	; 51
 116:	85 60       	ori	r24, 0x05	; 5
 118:	83 bf       	out	0x33, r24	; 51
     OCR0 = 0xFF;                       //TOP (will spike @ MAX+1 when set to zero)
 11a:	8f ef       	ldi	r24, 0xFF	; 255
 11c:	81 bf       	out	0x31, r24	; 49
     TIMSK |= (1<<TOIE0);
 11e:	87 b7       	in	r24, 0x37	; 55
 120:	81 60       	ori	r24, 0x01	; 1
 122:	87 bf       	out	0x37, r24	; 55
 124:	08 95       	ret

00000126 <timer2_init>:
  }//Timer0
//****************************************************************************************************/
//*********TIMER2_INIT****PWM_Y_AXIS*******************************************************************/
  
  void timer2_init(void){             
    TCCR2 |= (1<<WGM21) | (1<<WGM20);  //fast PWM
 126:	85 b5       	in	r24, 0x25	; 37
 128:	88 64       	ori	r24, 0x48	; 72
 12a:	85 bd       	out	0x25, r24	; 37
    TCCR2 |= (1<<COM21) ;              //PB7 output, non Inverted
 12c:	85 b5       	in	r24, 0x25	; 37
 12e:	80 62       	ori	r24, 0x20	; 32
 130:	85 bd       	out	0x25, r24	; 37
    TCCR2 |= (1<<CS22) | (1<<CS20);    //1024 prescale (H_bridge, 100k switching max) 16M/1024=15K
 132:	85 b5       	in	r24, 0x25	; 37
 134:	85 60       	ori	r24, 0x05	; 5
 136:	85 bd       	out	0x25, r24	; 37
    OCR2 = 0xFF;                       //TOP (will spike @ MAX+1 when set to zero) 
 138:	8f ef       	ldi	r24, 0xFF	; 255
 13a:	83 bd       	out	0x23, r24	; 35
    TIMSK |= (1<<TOIE2);               //Enable interupt on overflow ISR(TIMER2_OVF){update OCR2}
 13c:	87 b7       	in	r24, 0x37	; 55
 13e:	80 64       	ori	r24, 0x40	; 64
 140:	87 bf       	out	0x37, r24	; 55
 142:	08 95       	ret

00000144 <port_init>:
//*****************************************************************************************************/
//******PORT INIT**************************************************************************************/

 void port_init(void){

  DDRB |= (1<<PB6) | (1<<PB5) | (1<<PB1) | (1<<PB0) | (1<<PB2);
 144:	87 b3       	in	r24, 0x17	; 23
 146:	87 66       	ori	r24, 0x67	; 103
 148:	87 bb       	out	0x17, r24	; 23
  DDRD |= 0x00;
 14a:	81 b3       	in	r24, 0x11	; 17
 14c:	81 bb       	out	0x11, r24	; 17
  PORTD = 0xFF;
 14e:	8f ef       	ldi	r24, 0xFF	; 255
 150:	82 bb       	out	0x12, r24	; 18
  DDRC = 0x00;
 152:	14 ba       	out	0x14, r1	; 20
 154:	08 95       	ret

00000156 <enc_init>:
 }//Port_init
//****************************************************************************************************/

/////////////////////Encoder Init//////////////////////////
void enc_init(void){
	DDRE &= ~(1<<PD7);
 156:	17 98       	cbi	0x02, 7	; 2
	PORTE |= (1<<PD7);
 158:	1f 9a       	sbi	0x03, 7	; 3
	EICRB = (1 << ISC70);
 15a:	80 e4       	ldi	r24, 0x40	; 64
 15c:	8a bf       	out	0x3a, r24	; 58
	EIMSK |= (1 << INT7);
 15e:	89 b7       	in	r24, 0x39	; 57
 160:	80 68       	ori	r24, 0x80	; 128
 162:	89 bf       	out	0x39, r24	; 57
	DDRE &= ~(1<<PD6);
 164:	16 98       	cbi	0x02, 6	; 2
	PORTE |= (1<<PD6);
 166:	1e 9a       	sbi	0x03, 6	; 3
	EICRB = (1 << ISC60);
 168:	80 e1       	ldi	r24, 0x10	; 16
 16a:	8a bf       	out	0x3a, r24	; 58
	EIMSK |= (1 << INT6);
 16c:	89 b7       	in	r24, 0x39	; 57
 16e:	80 64       	ori	r24, 0x40	; 64
 170:	89 bf       	out	0x39, r24	; 57
	DDRE &= ~(1<<PD5);
 172:	15 98       	cbi	0x02, 5	; 2
	PORTE |= (1<<PD5);
 174:	1d 9a       	sbi	0x03, 5	; 3
	EICRB = (1 << ISC50);
 176:	84 e0       	ldi	r24, 0x04	; 4
 178:	8a bf       	out	0x3a, r24	; 58
	EIMSK |= (1 << INT5);
 17a:	89 b7       	in	r24, 0x39	; 57
 17c:	80 62       	ori	r24, 0x20	; 32
 17e:	89 bf       	out	0x39, r24	; 57
	DDRE &= ~(1<<PD4);
 180:	14 98       	cbi	0x02, 4	; 2
	PORTE |= (1<<PD4);
 182:	1c 9a       	sbi	0x03, 4	; 3
	EICRB = (1 << ISC40);
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	8a bf       	out	0x3a, r24	; 58
	EIMSK |= (1 << INT4);
 188:	89 b7       	in	r24, 0x39	; 57
 18a:	80 61       	ori	r24, 0x10	; 16
 18c:	89 bf       	out	0x39, r24	; 57
 18e:	08 95       	ret

00000190 <__vector_16>:
}

//****************************************************************************************************/
//*************ISR**CLOCK*****************************************************************************/
  ISR(TIMER0_OVF_vect){
 190:	1f 92       	push	r1
 192:	0f 92       	push	r0
 194:	0f b6       	in	r0, 0x3f	; 63
 196:	0f 92       	push	r0
 198:	11 24       	eor	r1, r1
 19a:	8f 93       	push	r24
     if(PWM_X > 0xC4)
 19c:	80 91 10 01 	lds	r24, 0x0110
 1a0:	85 3c       	cpi	r24, 0xC5	; 197
 1a2:	18 f0       	brcs	.+6      	; 0x1aa <__vector_16+0x1a>
		PWM_X = 0xC4;
 1a4:	84 ec       	ldi	r24, 0xC4	; 196
 1a6:	80 93 10 01 	sts	0x0110, r24
     OCR0 = PWM_X;
 1aa:	80 91 10 01 	lds	r24, 0x0110
 1ae:	81 bf       	out	0x31, r24	; 49
}//ISR
 1b0:	8f 91       	pop	r24
 1b2:	0f 90       	pop	r0
 1b4:	0f be       	out	0x3f, r0	; 63
 1b6:	0f 90       	pop	r0
 1b8:	1f 90       	pop	r1
 1ba:	18 95       	reti

000001bc <__vector_10>:
//*****************************************************************************************************/
//*************ISR************************************************************************************/
  ISR(TIMER2_OVF_vect){     //update OCR2 
 1bc:	1f 92       	push	r1
 1be:	0f 92       	push	r0
 1c0:	0f b6       	in	r0, 0x3f	; 63
 1c2:	0f 92       	push	r0
 1c4:	11 24       	eor	r1, r1
 1c6:	8f 93       	push	r24
      OCR2 = PWM_Y;
 1c8:	80 91 11 01 	lds	r24, 0x0111
 1cc:	83 bd       	out	0x23, r24	; 35
  
  }//ISR
 1ce:	8f 91       	pop	r24
 1d0:	0f 90       	pop	r0
 1d2:	0f be       	out	0x3f, r0	; 63
 1d4:	0f 90       	pop	r0
 1d6:	1f 90       	pop	r1
 1d8:	18 95       	reti

000001da <__vector_8>:



//*******ENCODER INTERRUPTS*********************************************************************************/
ISR(INT7_vect)
{
 1da:	1f 92       	push	r1
 1dc:	0f 92       	push	r0
 1de:	0f b6       	in	r0, 0x3f	; 63
 1e0:	0f 92       	push	r0
 1e2:	11 24       	eor	r1, r1
 1e4:	8f 93       	push	r24
 1e6:	9f 93       	push	r25
 1e8:	af 93       	push	r26
 1ea:	bf 93       	push	r27
// 		Ycount++;
// 	else
// 		Ycount = 0;
	if(PINE6){
		if(PINE7){
		--Xcount;
 1ec:	80 91 0c 01 	lds	r24, 0x010C
 1f0:	90 91 0d 01 	lds	r25, 0x010D
 1f4:	a0 91 0e 01 	lds	r26, 0x010E
 1f8:	b0 91 0f 01 	lds	r27, 0x010F
 1fc:	01 97       	sbiw	r24, 0x01	; 1
 1fe:	a1 09       	sbc	r26, r1
 200:	b1 09       	sbc	r27, r1
 202:	80 93 0c 01 	sts	0x010C, r24
 206:	90 93 0d 01 	sts	0x010D, r25
 20a:	a0 93 0e 01 	sts	0x010E, r26
 20e:	b0 93 0f 01 	sts	0x010F, r27
		Xstate = ccw1;
 212:	80 91 03 01 	lds	r24, 0x0103
 216:	80 93 00 01 	sts	0x0100, r24
		else{
		Xstate = ccw1;
		--Xcount;
		}
	}
}
 21a:	bf 91       	pop	r27
 21c:	af 91       	pop	r26
 21e:	9f 91       	pop	r25
 220:	8f 91       	pop	r24
 222:	0f 90       	pop	r0
 224:	0f be       	out	0x3f, r0	; 63
 226:	0f 90       	pop	r0
 228:	1f 90       	pop	r1
 22a:	18 95       	reti

0000022c <__vector_7>:

ISR(INT6_vect)
{
 22c:	1f 92       	push	r1
 22e:	0f 92       	push	r0
 230:	0f b6       	in	r0, 0x3f	; 63
 232:	0f 92       	push	r0
 234:	11 24       	eor	r1, r1
 236:	8f 93       	push	r24
 238:	9f 93       	push	r25
 23a:	af 93       	push	r26
 23c:	bf 93       	push	r27
	if(PINE7){
		if(PINE6){
			++Xcount;
 23e:	80 91 0c 01 	lds	r24, 0x010C
 242:	90 91 0d 01 	lds	r25, 0x010D
 246:	a0 91 0e 01 	lds	r26, 0x010E
 24a:	b0 91 0f 01 	lds	r27, 0x010F
 24e:	01 96       	adiw	r24, 0x01	; 1
 250:	a1 1d       	adc	r26, r1
 252:	b1 1d       	adc	r27, r1
 254:	80 93 0c 01 	sts	0x010C, r24
 258:	90 93 0d 01 	sts	0x010D, r25
 25c:	a0 93 0e 01 	sts	0x010E, r26
 260:	b0 93 0f 01 	sts	0x010F, r27
			Xstate = cw1;
 264:	80 91 05 01 	lds	r24, 0x0105
 268:	80 93 00 01 	sts	0x0100, r24
		else{
			Xstate = cw1;
			++Xcount;
		}
	}
}
 26c:	bf 91       	pop	r27
 26e:	af 91       	pop	r26
 270:	9f 91       	pop	r25
 272:	8f 91       	pop	r24
 274:	0f 90       	pop	r0
 276:	0f be       	out	0x3f, r0	; 63
 278:	0f 90       	pop	r0
 27a:	1f 90       	pop	r1
 27c:	18 95       	reti

0000027e <__vector_6>:

ISR(INT5_vect){
 27e:	1f 92       	push	r1
 280:	0f 92       	push	r0
 282:	0f b6       	in	r0, 0x3f	; 63
 284:	0f 92       	push	r0
 286:	11 24       	eor	r1, r1
 288:	8f 93       	push	r24
 28a:	9f 93       	push	r25
 28c:	af 93       	push	r26
 28e:	bf 93       	push	r27
	if(PINE4){
		if(PINE5){
			--Ycount;
 290:	80 91 08 01 	lds	r24, 0x0108
 294:	90 91 09 01 	lds	r25, 0x0109
 298:	a0 91 0a 01 	lds	r26, 0x010A
 29c:	b0 91 0b 01 	lds	r27, 0x010B
 2a0:	01 97       	sbiw	r24, 0x01	; 1
 2a2:	a1 09       	sbc	r26, r1
 2a4:	b1 09       	sbc	r27, r1
 2a6:	80 93 08 01 	sts	0x0108, r24
 2aa:	90 93 09 01 	sts	0x0109, r25
 2ae:	a0 93 0a 01 	sts	0x010A, r26
 2b2:	b0 93 0b 01 	sts	0x010B, r27
			Ystate = ccw2;
 2b6:	80 91 02 01 	lds	r24, 0x0102
 2ba:	80 93 01 01 	sts	0x0101, r24
		else{
			Ystate = ccw2;
			--Ycount;
		}
	}
}
 2be:	bf 91       	pop	r27
 2c0:	af 91       	pop	r26
 2c2:	9f 91       	pop	r25
 2c4:	8f 91       	pop	r24
 2c6:	0f 90       	pop	r0
 2c8:	0f be       	out	0x3f, r0	; 63
 2ca:	0f 90       	pop	r0
 2cc:	1f 90       	pop	r1
 2ce:	18 95       	reti

000002d0 <__vector_5>:

ISR(INT4_vect){
 2d0:	1f 92       	push	r1
 2d2:	0f 92       	push	r0
 2d4:	0f b6       	in	r0, 0x3f	; 63
 2d6:	0f 92       	push	r0
 2d8:	11 24       	eor	r1, r1
 2da:	8f 93       	push	r24
 2dc:	9f 93       	push	r25
 2de:	af 93       	push	r26
 2e0:	bf 93       	push	r27
	if(PINE5){
		if(PINE4){
			++Ycount;
 2e2:	80 91 08 01 	lds	r24, 0x0108
 2e6:	90 91 09 01 	lds	r25, 0x0109
 2ea:	a0 91 0a 01 	lds	r26, 0x010A
 2ee:	b0 91 0b 01 	lds	r27, 0x010B
 2f2:	01 96       	adiw	r24, 0x01	; 1
 2f4:	a1 1d       	adc	r26, r1
 2f6:	b1 1d       	adc	r27, r1
 2f8:	80 93 08 01 	sts	0x0108, r24
 2fc:	90 93 09 01 	sts	0x0109, r25
 300:	a0 93 0a 01 	sts	0x010A, r26
 304:	b0 93 0b 01 	sts	0x010B, r27
			Ystate = cw2;
 308:	80 91 04 01 	lds	r24, 0x0104
 30c:	80 93 01 01 	sts	0x0101, r24
		else{
			Ystate = cw2;
			++Ycount;
		}
	}
}
 310:	bf 91       	pop	r27
 312:	af 91       	pop	r26
 314:	9f 91       	pop	r25
 316:	8f 91       	pop	r24
 318:	0f 90       	pop	r0
 31a:	0f be       	out	0x3f, r0	; 63
 31c:	0f 90       	pop	r0
 31e:	1f 90       	pop	r1
 320:	18 95       	reti

00000322 <main>:
//**************************************************MAIN************************************************/ 
int main(){

  timer2_init();         //PWM Y_Axis
 322:	01 df       	rcall	.-510    	; 0x126 <timer2_init>
  timer0_init();         //Real Time clock
 324:	f1 de       	rcall	.-542    	; 0x108 <timer0_init>
  //spi_init();            //SPI init
  //adc_init();            //ADC init for PF0
  port_init();           //PORT INIT 
 326:	0e df       	rcall	.-484    	; 0x144 <port_init>
  enc_init();
 328:	16 df       	rcall	.-468    	; 0x156 <enc_init>
  PORTB |= (1<<PB5);
 32a:	c5 9a       	sbi	0x18, 5	; 24
  //External interrupt init
  
  sei();
 32c:	78 94       	sei
		 DDRB |= (1<<PB7);   //Turn on PWM (Y-axis)
	 } else if(debounce(1)){//IF button S2 is pressed, Y-Axis goes LEFT
		 PORTB |= (1<<PB0);  //turn on LED1, puts high on standby pin on H-bridge (enable)
		 PORTB &= ~(1<<PB5); //pin5 to Ain1 (Y-axis)
		 PORTB |= (1<<PB6);  //pin6 to Ain2 (Y-axis)
		 PWM_Y = 0xFE;       //Duty cycle (Y-axis)
 32e:	de ef       	ldi	r29, 0xFE	; 254
	 if(debounce(3)){//IF button S4 is pressed, X-Axis goes RIGHT
		 PWM_X = 0x40;       //Duty cycle (X-axis)
		 DDRB |= (1<<PB4);   //Turn on PWM (X-axis)
		 PORTB |= (1<<PB2);  //puts high on DIR2
	 } else if(debounce(4)){//IF button S5 is pressed, X-Axis goes LEFT
		 PWM_X = 0x40;       //Duty cycle (X-axis)
 330:	c0 e4       	ldi	r28, 0x40	; 64
  sei();
 
  while (1) {
	   
///////////////////////////  Y-AXIS  ////////////////////////////////////////
	 if(debounce(0)){//IF button S1 is pressed, Y-Axis goes RIGHT
 332:	80 e0       	ldi	r24, 0x00	; 0
 334:	c9 de       	rcall	.-622    	; 0xc8 <debounce>
 336:	88 23       	and	r24, r24
 338:	39 f0       	breq	.+14     	; 0x348 <main+0x26>
		 PORTB |= (1<<PB0);  //turn on LED1, puts high on standby pin on H-bridge (enable)
 33a:	c0 9a       	sbi	0x18, 0	; 24
		 PORTB |= (1<<PB5);  //pin5 to Ain1 (Y-axis)
 33c:	c5 9a       	sbi	0x18, 5	; 24
		 PORTB &= ~(1<<PB6); //pin6 to Ain2 (Y-axis)
 33e:	c6 98       	cbi	0x18, 6	; 24
		 PWM_Y = 0xFE;       //Duty cycle (Y-axis)
 340:	d0 93 11 01 	sts	0x0111, r29
		 DDRB |= (1<<PB7);   //Turn on PWM (Y-axis)
 344:	bf 9a       	sbi	0x17, 7	; 23
 346:	15 c0       	rjmp	.+42     	; 0x372 <main+0x50>
	 } else if(debounce(1)){//IF button S2 is pressed, Y-Axis goes LEFT
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	be de       	rcall	.-644    	; 0xc8 <debounce>
 34c:	88 23       	and	r24, r24
 34e:	39 f0       	breq	.+14     	; 0x35e <main+0x3c>
		 PORTB |= (1<<PB0);  //turn on LED1, puts high on standby pin on H-bridge (enable)
 350:	c0 9a       	sbi	0x18, 0	; 24
		 PORTB &= ~(1<<PB5); //pin5 to Ain1 (Y-axis)
 352:	c5 98       	cbi	0x18, 5	; 24
		 PORTB |= (1<<PB6);  //pin6 to Ain2 (Y-axis)
 354:	c6 9a       	sbi	0x18, 6	; 24
		 PWM_Y = 0xFE;       //Duty cycle (Y-axis)
 356:	d0 93 11 01 	sts	0x0111, r29
		 DDRB |= (1<<PB7);   //Turn on PWM (Y-axis)
 35a:	bf 9a       	sbi	0x17, 7	; 23
 35c:	0a c0       	rjmp	.+20     	; 0x372 <main+0x50>
	 } else if(debounce(2)){//IF button S3 is pressed, Y-Axis STOP
 35e:	82 e0       	ldi	r24, 0x02	; 2
 360:	b3 de       	rcall	.-666    	; 0xc8 <debounce>
 362:	88 23       	and	r24, r24
 364:	31 f0       	breq	.+12     	; 0x372 <main+0x50>
		 PORTB &= ~(1<<PB0);  //turn off LED1, puts low on standby pin on H-bridge (disenable)
 366:	c0 98       	cbi	0x18, 0	; 24
		 PORTB &= ~(1<<PB5); //pin5 to Ain1 (Y-axis)
 368:	c5 98       	cbi	0x18, 5	; 24
		 PORTB &= ~(1<<PB6);  //pin6 to Ain2 (Y-axis)
 36a:	c6 98       	cbi	0x18, 6	; 24
		 PWM_Y = 0x00;        //Duty cycle (Y-axis)
 36c:	10 92 11 01 	sts	0x0111, r1
		 DDRB &= ~(1<<PB7);   //Turn off PWM (Y-axis)
 370:	bf 98       	cbi	0x17, 7	; 23
	 }
///////////////////////////////  X-AXIS  ////////////////////////////////////////
	 if(debounce(3)){//IF button S4 is pressed, X-Axis goes RIGHT
 372:	83 e0       	ldi	r24, 0x03	; 3
 374:	a9 de       	rcall	.-686    	; 0xc8 <debounce>
 376:	88 23       	and	r24, r24
 378:	29 f0       	breq	.+10     	; 0x384 <main+0x62>
		 PWM_X = 0x40;       //Duty cycle (X-axis)
 37a:	c0 93 10 01 	sts	0x0110, r28
		 DDRB |= (1<<PB4);   //Turn on PWM (X-axis)
 37e:	bc 9a       	sbi	0x17, 4	; 23
		 PORTB |= (1<<PB2);  //puts high on DIR2
 380:	c2 9a       	sbi	0x18, 2	; 24
 382:	10 c0       	rjmp	.+32     	; 0x3a4 <main+0x82>
	 } else if(debounce(4)){//IF button S5 is pressed, X-Axis goes LEFT
 384:	84 e0       	ldi	r24, 0x04	; 4
 386:	a0 de       	rcall	.-704    	; 0xc8 <debounce>
 388:	88 23       	and	r24, r24
 38a:	29 f0       	breq	.+10     	; 0x396 <main+0x74>
		 PWM_X = 0x40;       //Duty cycle (X-axis)
 38c:	c0 93 10 01 	sts	0x0110, r28
		 DDRB |= (1<<PB4);   //Turn on PWM (X-axis)
 390:	bc 9a       	sbi	0x17, 4	; 23
		 PORTB &= ~(1<<PB2);  //puts low on DIR2
 392:	c2 98       	cbi	0x18, 2	; 24
 394:	07 c0       	rjmp	.+14     	; 0x3a4 <main+0x82>
	 } else if(debounce(5)){//IF button S6 is pressed, X-Axis STOP
 396:	85 e0       	ldi	r24, 0x05	; 5
 398:	97 de       	rcall	.-722    	; 0xc8 <debounce>
 39a:	88 23       	and	r24, r24
 39c:	19 f0       	breq	.+6      	; 0x3a4 <main+0x82>
		 PWM_X = 0x00;        //Duty cycle (X-axis)
 39e:	10 92 10 01 	sts	0x0110, r1
		 DDRB &= ~(1<<PB4);   //Turn off PWM (X-axis)
 3a2:	bc 98       	cbi	0x17, 4	; 23
	 }
////////////////////////////// Test Code /////////////////////////////////////
	if(Xcount == 1000){
 3a4:	80 91 0c 01 	lds	r24, 0x010C
 3a8:	90 91 0d 01 	lds	r25, 0x010D
 3ac:	a0 91 0e 01 	lds	r26, 0x010E
 3b0:	b0 91 0f 01 	lds	r27, 0x010F
 3b4:	88 3e       	cpi	r24, 0xE8	; 232
 3b6:	93 40       	sbci	r25, 0x03	; 3
 3b8:	a1 05       	cpc	r26, r1
 3ba:	b1 05       	cpc	r27, r1
 3bc:	19 f4       	brne	.+6      	; 0x3c4 <main+0xa2>
		PWM_X = 0;
 3be:	10 92 10 01 	sts	0x0110, r1
		DDRB &= ~(1<<PB4);
 3c2:	bc 98       	cbi	0x17, 4	; 23
	}
	if(Ycount == 10000){
 3c4:	80 91 08 01 	lds	r24, 0x0108
 3c8:	90 91 09 01 	lds	r25, 0x0109
 3cc:	a0 91 0a 01 	lds	r26, 0x010A
 3d0:	b0 91 0b 01 	lds	r27, 0x010B
 3d4:	80 31       	cpi	r24, 0x10	; 16
 3d6:	97 42       	sbci	r25, 0x27	; 39
 3d8:	a1 05       	cpc	r26, r1
 3da:	b1 05       	cpc	r27, r1
 3dc:	09 f0       	breq	.+2      	; 0x3e0 <main+0xbe>
 3de:	a9 cf       	rjmp	.-174    	; 0x332 <main+0x10>
		PWM_Y = 0;
 3e0:	10 92 11 01 	sts	0x0111, r1
		DDRB &= ~(1<<PB7);
 3e4:	bf 98       	cbi	0x17, 7	; 23
 3e6:	a5 cf       	rjmp	.-182    	; 0x332 <main+0x10>

000003e8 <_exit>:
 3e8:	f8 94       	cli

000003ea <__stop_program>:
 3ea:	ff cf       	rjmp	.-2      	; 0x3ea <__stop_program>
