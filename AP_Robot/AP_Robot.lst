
AP_Robot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000001fa  0000028e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  0000028e  2**0
                  ALLOC
  3 .stab         00000990  00000000  00000000  00000290  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d92  00000000  00000000  00000c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000019b2  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 c2 00 	jmp	0x184	; 0x184 <__vector_10>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__vector_16>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__vector_21>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  6c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  70:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  74:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  78:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  7c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  80:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  84:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  88:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a4 30       	cpi	r26, 0x04	; 4
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 db 00 	call	0x1b6	; 0x1b6 <main>
  ac:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <debounce_switch>:
//****************************************************************************************************/
//************DEBOUNCE**Takes in button**Returns true if pressed***************************************/
 
  int8_t debounce_switch(uint8_t button) {
    static uint16_t state = 0; //holds present state 
    state = (state << 1) | (! bit_is_clear(PINA, button))| 0xE000;
  b4:	49 b3       	in	r20, 0x19	; 25
  b6:	20 91 02 01 	lds	r18, 0x0102
  ba:	30 91 03 01 	lds	r19, 0x0103
  be:	22 0f       	add	r18, r18
  c0:	33 1f       	adc	r19, r19
  c2:	30 6e       	ori	r19, 0xE0	; 224
  c4:	50 e0       	ldi	r21, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <debounce_switch+0x18>
  c8:	55 95       	asr	r21
  ca:	47 95       	ror	r20
  cc:	8a 95       	dec	r24
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <debounce_switch+0x14>
  d0:	41 70       	andi	r20, 0x01	; 1
  d2:	55 27       	eor	r21, r21
  d4:	24 2b       	or	r18, r20
  d6:	35 2b       	or	r19, r21
  d8:	30 93 03 01 	sts	0x0103, r19
  dc:	20 93 02 01 	sts	0x0102, r18
    if (state == 0xF000) return 1;
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	21 15       	cp	r18, r1
  e4:	30 4f       	sbci	r19, 0xF0	; 240
  e6:	09 f0       	breq	.+2      	; 0xea <debounce_switch+0x36>
  e8:	80 e0       	ldi	r24, 0x00	; 0
    return 0;
  }//Debounce
  ea:	08 95       	ret

000000ec <timer0_init>:
 
//******************************************************************************************************/
//*********TIMER0_INIT****CLOCK***********************************************************************/
  
  void timer0_init(void){             //timer counter 0 setup, running off 32768 clock
     ASSR |= (1<<AS0);                //External Crystal
  ec:	80 b7       	in	r24, 0x30	; 48
  ee:	88 60       	ori	r24, 0x08	; 8
  f0:	80 bf       	out	0x30, r24	; 48
     TIMSK |= (1<<TOIE0);             //enable interrupts
  f2:	87 b7       	in	r24, 0x37	; 55
  f4:	81 60       	ori	r24, 0x01	; 1
  f6:	87 bf       	out	0x37, r24	; 55
     TCCR0 |= (1<<CS02) | (1<<CS00);  //normal mode, prescale by 128
  f8:	83 b7       	in	r24, 0x33	; 51
  fa:	85 60       	ori	r24, 0x05	; 5
  fc:	83 bf       	out	0x33, r24	; 51
  fe:	08 95       	ret

00000100 <timer2_init>:
  }//Timer0
//****************************************************************************************************/
//*********TIMER2_INIT****PWM_Y_AXIS*******************************************************************/
  
  void timer2_init(void){             
    TCCR2 |= (1<<WGM21) | (1<<WGM20);  //fast PWM
 100:	85 b5       	in	r24, 0x25	; 37
 102:	88 64       	ori	r24, 0x48	; 72
 104:	85 bd       	out	0x25, r24	; 37
    TCCR2 |= (1<<COM21) ;              //PB7 output, non Inverted
 106:	85 b5       	in	r24, 0x25	; 37
 108:	80 62       	ori	r24, 0x20	; 32
 10a:	85 bd       	out	0x25, r24	; 37
    TCCR2 |= (1<<CS22) | (1<<CS21);    //256 prescale (H_bridge, 100k switching max) 16M/256=62.5K
 10c:	85 b5       	in	r24, 0x25	; 37
 10e:	86 60       	ori	r24, 0x06	; 6
 110:	85 bd       	out	0x25, r24	; 37
    OCR2 = 0x00;                       //TOP (will spike @ MAX+1 when set to zero) 
 112:	13 bc       	out	0x23, r1	; 35
    TIMSK |= (1<<TOIE2);               //Enable interupt on overflow ISR(TIMER2_OVF){update OCR2}
 114:	87 b7       	in	r24, 0x37	; 55
 116:	80 64       	ori	r24, 0x40	; 64
 118:	87 bf       	out	0x37, r24	; 55
 11a:	08 95       	ret

0000011c <spi_init>:
//****************************************************************************************************/
//*******SPI_INIT**************************************************************************************/
  
  void spi_init(void){
    
    DDRB |= (1<< PB0) | (1<< PB1) | (1<<PB2); 
 11c:	87 b3       	in	r24, 0x17	; 23
 11e:	87 60       	ori	r24, 0x07	; 7
 120:	87 bb       	out	0x17, r24	; 23
    SPCR |= (1<< SPE) | (1<< MSTR);
 122:	8d b1       	in	r24, 0x0d	; 13
 124:	80 65       	ori	r24, 0x50	; 80
 126:	8d b9       	out	0x0d, r24	; 13
    SPSR |= (1<< SPI2X);
 128:	70 9a       	sbi	0x0e, 0	; 14
 12a:	08 95       	ret

0000012c <port_init>:
//*****************************************************************************************************/
//******PORT INIT**************************************************************************************/

 void port_init(void){

  DDRB |= (1<<PB7); //PB7 (PWM)
 12c:	bf 9a       	sbi	0x17, 7	; 23
  DDRB |= (1<<PB4); //LED4 as output 
 12e:	bc 9a       	sbi	0x17, 4	; 23
  DDRA = 0x00;       //set buttons for inputs.  
 130:	1a ba       	out	0x1a, r1	; 26
  PORTA = 0xFF;      //Set pullups for buttons
 132:	8f ef       	ldi	r24, 0xFF	; 255
 134:	8b bb       	out	0x1b, r24	; 27
 136:	08 95       	ret

00000138 <adc_init>:
 }//Port_init
//****************************************************************************************************/
//******ADC INIT**************************************************************************************/

 void adc_init(void){
   ADMUX  |= (1<<REFS0);  //5V reference
 138:	3e 9a       	sbi	0x07, 6	; 7
   ADMUX  |= (1<<ADLAR);  //Left justify
 13a:	3d 9a       	sbi	0x07, 5	; 7
   ADCSRA |= (1<<ADEN);   //ADC enable
 13c:	37 9a       	sbi	0x06, 7	; 6
   ADCSRA |= (1<<ADFR);   //Free Running Mode
 13e:	35 9a       	sbi	0x06, 5	; 6
   ADCSRA |= (1<<ADIE);   //Interupt enable on conversion complete ISR(ADC) {adc_temp = ADCH;}
 140:	33 9a       	sbi	0x06, 3	; 6
   ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);   //Prescale 128
 142:	86 b1       	in	r24, 0x06	; 6
 144:	87 60       	ori	r24, 0x07	; 7
 146:	86 b9       	out	0x06, r24	; 6
   ADCSRA |= (1<<ADSC);
 148:	36 9a       	sbi	0x06, 6	; 6
 14a:	08 95       	ret

0000014c <__vector_16>:
 }//ADC_init
//****************************************************************************************************/
//*************ISR**CLOCK*****************************************************************************/
  ISR(TIMER0_OVF_vect){
 14c:	1f 92       	push	r1
 14e:	0f 92       	push	r0
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	0f 92       	push	r0
 154:	11 24       	eor	r1, r1
 156:	8f 93       	push	r24
     static uint8_t j = 0;
     if(j==9){j=0;}
 158:	80 91 01 01 	lds	r24, 0x0101
 15c:	89 30       	cpi	r24, 0x09	; 9
 15e:	49 f0       	breq	.+18     	; 0x172 <__vector_16+0x26>
 160:	8f 5f       	subi	r24, 0xFF	; 255

       case(8): {
                 break;}
       default:  break;
     }//switch
    j++;
 162:	80 93 01 01 	sts	0x0101, r24
 
}//ISR
 166:	8f 91       	pop	r24
 168:	0f 90       	pop	r0
 16a:	0f be       	out	0x3f, r0	; 63
 16c:	0f 90       	pop	r0
 16e:	1f 90       	pop	r1
 170:	18 95       	reti
 172:	81 e0       	ldi	r24, 0x01	; 1

       case(8): {
                 break;}
       default:  break;
     }//switch
    j++;
 174:	80 93 01 01 	sts	0x0101, r24
 
}//ISR
 178:	8f 91       	pop	r24
 17a:	0f 90       	pop	r0
 17c:	0f be       	out	0x3f, r0	; 63
 17e:	0f 90       	pop	r0
 180:	1f 90       	pop	r1
 182:	18 95       	reti

00000184 <__vector_10>:
//*****************************************************************************************************/
//*************ISR************************************************************************************/
  ISR(TIMER2_OVF_vect){     //update OCR2 
 184:	1f 92       	push	r1
 186:	0f 92       	push	r0
 188:	0f b6       	in	r0, 0x3f	; 63
 18a:	0f 92       	push	r0
 18c:	11 24       	eor	r1, r1
 18e:	8f 93       	push	r24
     
      OCR2 = PWM_Y;
 190:	80 91 00 01 	lds	r24, 0x0100
 194:	83 bd       	out	0x23, r24	; 35
  
  }//ISR
 196:	8f 91       	pop	r24
 198:	0f 90       	pop	r0
 19a:	0f be       	out	0x3f, r0	; 63
 19c:	0f 90       	pop	r0
 19e:	1f 90       	pop	r1
 1a0:	18 95       	reti

000001a2 <__vector_21>:
//*****************************************************************************************************/
//*************ISR***ADC_conversion******************************************************************/
  ISR(ADC_vect){     //ADC conversion complete
 1a2:	1f 92       	push	r1
 1a4:	0f 92       	push	r0
 1a6:	0f b6       	in	r0, 0x3f	; 63
 1a8:	0f 92       	push	r0
 1aa:	11 24       	eor	r1, r1
     
          
  }//ISR
 1ac:	0f 90       	pop	r0
 1ae:	0f be       	out	0x3f, r0	; 63
 1b0:	0f 90       	pop	r0
 1b2:	1f 90       	pop	r1
 1b4:	18 95       	reti

000001b6 <main>:
//**************************************************MAIN************************************************/ 
//***************************************************MAIN***********************************************/
//****************************************************MAIN**********************************************/
int main(){

  timer2_init();         //PWM Y_Axis
 1b6:	0e 94 80 00 	call	0x100	; 0x100 <timer2_init>
//*****************************************************************************************************/
//******PORT INIT**************************************************************************************/

 void port_init(void){

  DDRB |= (1<<PB7); //PB7 (PWM)
 1ba:	bf 9a       	sbi	0x17, 7	; 23
  DDRB |= (1<<PB4); //LED4 as output 
 1bc:	bc 9a       	sbi	0x17, 4	; 23
  DDRA = 0x00;       //set buttons for inputs.  
 1be:	1a ba       	out	0x1a, r1	; 26
  PORTA = 0xFF;      //Set pullups for buttons
 1c0:	8f ef       	ldi	r24, 0xFF	; 255
 1c2:	8b bb       	out	0x1b, r24	; 27
  timer2_init();         //PWM Y_Axis
  //timer0_init();         //Real Time clock
  //spi_init();            //SPI init
  //adc_init();            //ADC init for PF0
  port_init();           //PORT INIT 
  sei();                 //enable interupts
 1c4:	78 94       	sei
 1c6:	80 91 02 01 	lds	r24, 0x0102
 1ca:	90 91 03 01 	lds	r25, 0x0103
//****************************************************************************************************/
//************DEBOUNCE**Takes in button**Returns true if pressed***************************************/
 
  int8_t debounce_switch(uint8_t button) {
    static uint16_t state = 0; //holds present state 
    state = (state << 1) | (! bit_is_clear(PINA, button))| 0xE000;
 1ce:	29 b3       	in	r18, 0x19	; 25
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	90 6e       	ori	r25, 0xE0	; 224
 1d6:	21 70       	andi	r18, 0x01	; 1
 1d8:	c2 2f       	mov	r28, r18
 1da:	20 e0       	ldi	r18, 0x00	; 0
 1dc:	d2 2f       	mov	r29, r18
 1de:	8c 2b       	or	r24, r28
 1e0:	9d 2b       	or	r25, r29
 1e2:	90 93 03 01 	sts	0x0103, r25
 1e6:	80 93 02 01 	sts	0x0102, r24
    if (state == 0xF000) return 1;
 1ea:	81 15       	cp	r24, r1
 1ec:	20 ef       	ldi	r18, 0xF0	; 240
 1ee:	92 07       	cpc	r25, r18
 1f0:	71 f7       	brne	.-36     	; 0x1ce <main+0x18>
  sei();                 //enable interupts
  
  while (1) {

    if((debounce_switch(0))){//IF button S1 is pressed
       PORTB |= (1<<PB4);  //turn on LED4
 1f2:	c4 9a       	sbi	0x18, 4	; 24
 1f4:	e8 cf       	rjmp	.-48     	; 0x1c6 <main+0x10>

000001f6 <_exit>:
 1f6:	f8 94       	cli

000001f8 <__stop_program>:
 1f8:	ff cf       	rjmp	.-2      	; 0x1f8 <__stop_program>
